AWSTemplateFormatVersion: '2010-09-09'
Description: Minimal-cost API Gateway + Lambda + S3 + CloudFront redirect system.

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket for static HTML hosting

Resources:

  ## S3 Bucket for static HTML content ##
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${BucketName}/*

  ## Lambda function for redirect logic ##
  RedirectLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RedirectHandler
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const token = JSON.parse(event.body).token;
            const path = event.rawPath.replace("/", "");
            return {
              statusCode: 302,
              headers: {
                Location: `https://${process.env.CF_DOMAIN}/${path}/index.html?token=${token}`
              }
            };
          };
      Environment:
        Variables:
          CF_DOMAIN: !Ref CloudFrontDomainPlaceholder  # Youâ€™ll update this manually or via export

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRedirectRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ## API Gateway - HTTP API ##
  RedirectAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: RedirectAPI
      ProtocolType: HTTP

  APIRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RedirectAPI
      RouteKey: 'POST /{proxy+}'
      Target: !Sub integrations/${LambdaIntegration}

  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RedirectAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RedirectLambda.Arn}/invocations
      PayloadFormatVersion: '2.0'

  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      ApiId: !Ref RedirectAPI
      AutoDeploy: true

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RedirectLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RedirectAPI}/*/*/*

  ## CloudFront distribution ##
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt StaticSiteBucket.RegionalDomainName
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
        DefaultRootObject: index.html
        # Uncomment and configure for custom domain with SSL certificate
        # Aliases:
        #   - your-domain.com
        #   - www.your-domain.com
        # ViewerCertificate:
        #   AcmCertificateArn: !Ref SSLCertificate
        #   SslSupportMethod: sni-only
        #   MinimumProtocolVersion: TLSv1.2_2021

  ## SSL Certificate (uncomment and configure for custom domain) ##
  # SSLCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: your-domain.com
  #     SubjectAlternativeNames:
  #       - www.your-domain.com
  #     ValidationMethod: DNS

  ## Placeholder for Lambda to know CF domain (manually replace after deployment) ##
  CloudFrontDomainPlaceholder:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /cf/domain
      Type: String
      Value: placeholder.cloudfront.net

Outputs:
  S3WebsiteURL:
    Value: !Sub http://${StaticSiteBucket}.s3-website-${AWS::Region}.amazonaws.com/
  APIEndpoint:
    Value: !Sub https://${RedirectAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/
  CloudFrontDomain:
    Value: !GetAtt CloudFrontDistribution.DomainName
